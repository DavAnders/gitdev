// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: collabs.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createCollab = `-- name: CreateCollab :one
INSERT INTO collabs (user1_github_id, user2_github_id)
VALUES ($1, $2)
RETURNING id, created_at, updated_at, user1_github_id, user2_github_id, message, pending
`

type CreateCollabParams struct {
	User1GithubID int32
	User2GithubID int32
}

func (q *Queries) CreateCollab(ctx context.Context, arg CreateCollabParams) (Collab, error) {
	row := q.db.QueryRowContext(ctx, createCollab, arg.User1GithubID, arg.User2GithubID)
	var i Collab
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.User1GithubID,
		&i.User2GithubID,
		&i.Message,
		&i.Pending,
	)
	return i, err
}

const getUsersCollabs = `-- name: GetUsersCollabs :many
SELECT users.id, users.created_at, users.updated_at, github_created_at, access_token, name, username, github_id, email, followers, following, panel_body, title, avatar_url, location, collabs.id, collabs.created_at, collabs.updated_at, user1_github_id, user2_github_id, message, pending
FROM users
    JOIN collabs ON users.github_id = collabs.user2_github_id
WHERE collabs.user1_github_id = $1
    AND collabs.pending = FALSE
`

type GetUsersCollabsRow struct {
	ID              uuid.UUID
	CreatedAt       time.Time
	UpdatedAt       time.Time
	GithubCreatedAt time.Time
	AccessToken     string
	Name            string
	Username        string
	GithubID        int32
	Email           string
	Followers       int32
	Following       int32
	PanelBody       sql.NullString
	Title           string
	AvatarUrl       string
	Location        string
	ID_2            uuid.UUID
	CreatedAt_2     time.Time
	UpdatedAt_2     time.Time
	User1GithubID   int32
	User2GithubID   int32
	Message         sql.NullString
	Pending         bool
}

func (q *Queries) GetUsersCollabs(ctx context.Context, user1GithubID int32) ([]GetUsersCollabsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersCollabs, user1GithubID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersCollabsRow
	for rows.Next() {
		var i GetUsersCollabsRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GithubCreatedAt,
			&i.AccessToken,
			&i.Name,
			&i.Username,
			&i.GithubID,
			&i.Email,
			&i.Followers,
			&i.Following,
			&i.PanelBody,
			&i.Title,
			&i.AvatarUrl,
			&i.Location,
			&i.ID_2,
			&i.CreatedAt_2,
			&i.UpdatedAt_2,
			&i.User1GithubID,
			&i.User2GithubID,
			&i.Message,
			&i.Pending,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCollabsPendingStatus = `-- name: RemoveCollabsPendingStatus :one
UPDATE collabs
SET pending = FALSE
WHERE user1_github_id = $1
    AND user2_github_id = $2
RETURNING id, created_at, updated_at, user1_github_id, user2_github_id, message, pending
`

type RemoveCollabsPendingStatusParams struct {
	User1GithubID int32
	User2GithubID int32
}

func (q *Queries) RemoveCollabsPendingStatus(ctx context.Context, arg RemoveCollabsPendingStatusParams) (Collab, error) {
	row := q.db.QueryRowContext(ctx, removeCollabsPendingStatus, arg.User1GithubID, arg.User2GithubID)
	var i Collab
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.User1GithubID,
		&i.User2GithubID,
		&i.Message,
		&i.Pending,
	)
	return i, err
}
