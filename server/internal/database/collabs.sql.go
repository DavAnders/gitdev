// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: collabs.sql

package database

import (
	"context"
)

const createCollab = `-- name: CreateCollab :one
INSERT INTO collabs (user1_id, user2_id)
VALUES (
        LEAST($1, $2),
        GREATEST($1, $2)
    )
RETURNING id, created_at, updated_at, user1_github_id, user2_github_id, message, pending
`

type CreateCollabParams struct {
	Column1 interface{}
	Column2 interface{}
}

func (q *Queries) CreateCollab(ctx context.Context, arg CreateCollabParams) (Collab, error) {
	row := q.db.QueryRowContext(ctx, createCollab, arg.Column1, arg.Column2)
	var i Collab
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.User1GithubID,
		&i.User2GithubID,
		&i.Message,
		&i.Pending,
	)
	return i, err
}

const getUsersCollabs = `-- name: GetUsersCollabs :many
SELECT id, created_at, updated_at, user1_github_id, user2_github_id, message, pending
FROM collabs
WHERE user1_github_id = $1
    OR user2_github_id = $1
`

func (q *Queries) GetUsersCollabs(ctx context.Context, user1GithubID int32) ([]Collab, error) {
	rows, err := q.db.QueryContext(ctx, getUsersCollabs, user1GithubID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Collab
	for rows.Next() {
		var i Collab
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.User1GithubID,
			&i.User2GithubID,
			&i.Message,
			&i.Pending,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCollabsPendingStatus = `-- name: RemoveCollabsPendingStatus :one
UPDATE collabs
SET pending = FALSE
WHERE (
        user1_github_id = LEAST($1, $2)
        AND user2_github_id = GREATEST($1, $2)
    )
RETURNING id, created_at, updated_at, user1_github_id, user2_github_id, message, pending
`

type RemoveCollabsPendingStatusParams struct {
	User1GithubID   int32
	User1GithubID_2 int32
}

func (q *Queries) RemoveCollabsPendingStatus(ctx context.Context, arg RemoveCollabsPendingStatusParams) (Collab, error) {
	row := q.db.QueryRowContext(ctx, removeCollabsPendingStatus, arg.User1GithubID, arg.User1GithubID_2)
	var i Collab
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.User1GithubID,
		&i.User2GithubID,
		&i.Message,
		&i.Pending,
	)
	return i, err
}
