// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: collabs.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createCollab = `-- name: CreateCollab :one
INSERT INTO collabs (id, user1_github_id, user2_github_id)
VALUES ($1, $2, $3)
RETURNING id, created_at, updated_at, user1_github_id, user2_github_id, message, pending
`

type CreateCollabParams struct {
	ID            uuid.UUID
	User1GithubID int32
	User2GithubID int32
}

func (q *Queries) CreateCollab(ctx context.Context, arg CreateCollabParams) (Collab, error) {
	row := q.db.QueryRowContext(ctx, createCollab, arg.ID, arg.User1GithubID, arg.User2GithubID)
	var i Collab
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.User1GithubID,
		&i.User2GithubID,
		&i.Message,
		&i.Pending,
	)
	return i, err
}

const getUsersCollabs = `-- name: GetUsersCollabs :many
SELECT user1.username AS user1_username,
    user1.email AS user1_email,
    user1.github_id AS user1_github_id,
    user2.username AS user2_username,
    user2.email AS user2_email,
    user2.github_id AS user2_github_id
FROM collabs
    JOIN users user1 ON user1.github_id = collabs.user1_github_id
    JOIN users user2 ON user2.github_id = collabs.user2_github_id
WHERE (
        collabs.user1_github_id = $1
        OR collabs.user2_github_id = $1
    )
    AND collabs.pending = FALSE
`

type GetUsersCollabsRow struct {
	User1Username string
	User1Email    string
	User1GithubID int32
	User2Username string
	User2Email    string
	User2GithubID int32
}

func (q *Queries) GetUsersCollabs(ctx context.Context, user1GithubID int32) ([]GetUsersCollabsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsersCollabs, user1GithubID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUsersCollabsRow
	for rows.Next() {
		var i GetUsersCollabsRow
		if err := rows.Scan(
			&i.User1Username,
			&i.User1Email,
			&i.User1GithubID,
			&i.User2Username,
			&i.User2Email,
			&i.User2GithubID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeCollabsPendingStatus = `-- name: RemoveCollabsPendingStatus :one
UPDATE collabs
SET pending = FALSE
WHERE user1_github_id = $1
    AND user2_github_id = $2
RETURNING id, created_at, updated_at, user1_github_id, user2_github_id, message, pending
`

type RemoveCollabsPendingStatusParams struct {
	User1GithubID int32
	User2GithubID int32
}

func (q *Queries) RemoveCollabsPendingStatus(ctx context.Context, arg RemoveCollabsPendingStatusParams) (Collab, error) {
	row := q.db.QueryRowContext(ctx, removeCollabsPendingStatus, arg.User1GithubID, arg.User2GithubID)
	var i Collab
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.User1GithubID,
		&i.User2GithubID,
		&i.Message,
		&i.Pending,
	)
	return i, err
}
