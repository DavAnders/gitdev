// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: repos.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRepo = `-- name: CreateRepo :one
INSERT INTO repos (
        id,
        name,
        user_id,
        star_gazers,
        watchers,
        url,
        repo_created_at,
        repo_updated_at
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8
    )
RETURNING id
`

type CreateRepoParams struct {
	ID            uuid.UUID
	Name          string
	UserID        uuid.UUID
	StarGazers    int32
	Watchers      int32
	Url           string
	RepoCreatedAt time.Time
	RepoUpdatedAt time.Time
}

func (q *Queries) CreateRepo(ctx context.Context, arg CreateRepoParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createRepo,
		arg.ID,
		arg.Name,
		arg.UserID,
		arg.StarGazers,
		arg.Watchers,
		arg.Url,
		arg.RepoCreatedAt,
		arg.RepoUpdatedAt,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUsersRepos = `-- name: GetUsersRepos :many
SELECT id, created_at, updated_at, name, user_id, star_gazers, watchers, url, repo_created_at, repo_updated_at
FROM repos
WHERE user_id = $1
`

func (q *Queries) GetUsersRepos(ctx context.Context, userID uuid.UUID) ([]Repo, error) {
	rows, err := q.db.QueryContext(ctx, getUsersRepos, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Repo
	for rows.Next() {
		var i Repo
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.UserID,
			&i.StarGazers,
			&i.Watchers,
			&i.Url,
			&i.RepoCreatedAt,
			&i.RepoUpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
