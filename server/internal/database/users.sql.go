// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
        id,
        access_token,
        name,
        username,
        github_id,
        repos,
        email,
        role,
        panel_body,
        avatar_url
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) ON CONFLICT (github_id) DO
UPDATE
SET access_token = $2,
    updated_at = CURRENT_TIMESTAMP
RETURNING id, created_at, updated_at, access_token, name, username, github_id, repos, email, panel_body, role, avatar_url
`

type CreateUserParams struct {
	ID          uuid.UUID
	AccessToken string
	Name        string
	Username    string
	GithubID    int32
	Repos       int32
	Email       string
	Role        sql.NullString
	PanelBody   sql.NullString
	AvatarUrl   string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.AccessToken,
		arg.Name,
		arg.Username,
		arg.GithubID,
		arg.Repos,
		arg.Email,
		arg.Role,
		arg.PanelBody,
		arg.AvatarUrl,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AccessToken,
		&i.Name,
		&i.Username,
		&i.GithubID,
		&i.Repos,
		&i.Email,
		&i.PanelBody,
		&i.Role,
		&i.AvatarUrl,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, created_at, updated_at, access_token, name, username, github_id, repos, email, panel_body, role, avatar_url
FROM users
LIMIT 20
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AccessToken,
			&i.Name,
			&i.Username,
			&i.GithubID,
			&i.Repos,
			&i.Email,
			&i.PanelBody,
			&i.Role,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByGitHubID = `-- name: GetUserByGitHubID :one
SELECT id, created_at, updated_at, access_token, name, username, github_id, repos, email, panel_body, role, avatar_url
FROM users
WHERE github_id = $1
`

func (q *Queries) GetUserByGitHubID(ctx context.Context, githubID int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByGitHubID, githubID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AccessToken,
		&i.Name,
		&i.Username,
		&i.GithubID,
		&i.Repos,
		&i.Email,
		&i.PanelBody,
		&i.Role,
		&i.AvatarUrl,
	)
	return i, err
}
